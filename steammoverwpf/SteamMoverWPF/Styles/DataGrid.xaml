<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:SteamMoverWPF" xmlns:Themes="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero">

    <!--DataGridColumnHeadersPresenter-->
    <Style TargetType="{x:Type DataGridColumnHeadersPresenter}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGridColumnHeadersPresenter}">
                    <Grid>
                        <ItemsPresenter />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!--DataGridColumnHeader-->
    <SolidColorBrush x:Key="DataGridColumnHeader.Background" Color="{DynamicResource AppWide.ElementsBackground}"/>
    <SolidColorBrush x:Key="DataGridColumnHeader.Foreground" Color="{DynamicResource AppWide.ElementsForeground}"/>
    <SolidColorBrush x:Key="DataGridColumnHeader.BorderBrush" Color="{DynamicResource AppWide.ElementsForeground}"/>
    <SolidColorBrush x:Key="DataGridColumnHeader.Sorted.BorderBrush" Color="{DynamicResource AppWide.Border}"/>
    <SolidColorBrush x:Key="DataGridColumnHeader.Sorted.Background" Color="{DynamicResource AppWide.Background}"/>
    <SolidColorBrush x:Key="DataGridColumnHeader.MouseOver.BorderBrush" Color="{DynamicResource AppWide.Border}"/>
    <SolidColorBrush x:Key="DataGridColumnHeader.MouseOver.Background" Color="{DynamicResource AppWide.Background}"/>

    <!--DataGridColumnHeader_StackOverflowStyle_Border-->
    <Style x:Key="DataGridColumnHeader_StackOverflowStyle_Border"  TargetType="{x:Type DataGridColumnHeader}">
        <Setter Property="Foreground" Value="{StaticResource DataGridColumnHeader.Foreground}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGridColumnHeader}">
                    <Border x:Name="buttonBorderOuter"
                        BorderBrush="{DynamicResource DataGridColumnHeader.BorderBrush}"
                        BorderThickness="1"
                        Background="#00ECECEC"
                        Padding="2">
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                      VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                      SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!--DataGridColumnHeader_StackOverflowStyle_Gripper-->
    <Style x:Key="DataGridColumnHeader_StackOverflowStyle_Gripper"  TargetType="{x:Type DataGridColumnHeader}">
        <Setter Property="Foreground" Value="{StaticResource DataGridColumnHeader.Foreground}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="DataGridColumnHeader">
                    <Grid Margin="{TemplateBinding Padding}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>

                        <!-- some stuff, like border etc. -->

                        <ContentPresenter />

                        <Thumb x:Name="PART_RightHeaderGripper" Grid.Column="1"
                        HorizontalAlignment="Right"
                        Width="2" BorderThickness="1"
                        BorderBrush="{Binding VerticalGridLinesBrush, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type DataGrid}}}"
                        Cursor="SizeWE"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--DataGridColumnHeader_StackOverflowStyle_GripperBorder-->
    <Style x:Key="DataGridColumnHeader_StackOverflowStyle_GripperBorder"  TargetType="{x:Type DataGridColumnHeader}">
        <Setter Property="Foreground" Value="{StaticResource DataGridColumnHeader.Foreground}" />
        <Setter Property="Background" Value="Red" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="DataGridColumnHeader">
                    <Grid Margin="{TemplateBinding Padding}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>

                        <!-- some stuff, like border etc. -->
                        <Border x:Name="buttonBorderOuter"
                        BorderBrush="{DynamicResource DataGridColumnHeader.BorderBrush}"
                        BorderThickness="1"
                        Background="{StaticResource DataGridColumnHeader.Background}"
                        Padding="2">
                            <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                      VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                      SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        </Border>

                        

                        <Thumb x:Name="PART_RightHeaderGripper" Grid.Column="1"
                        HorizontalAlignment="Right"
                        Width="2" BorderThickness="1"
                        BorderBrush="{Binding VerticalGridLinesBrush, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type DataGrid}}}"
                        Cursor="SizeWE"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--DataGridColumnHeader_CustomStyle-->
    <Style x:Key="DataGridColumnHeader_CustomStyle"  TargetType="{x:Type DataGridColumnHeader}"  >
        <Setter Property="Background" Value="{StaticResource DataGridColumnHeader.Background}" />
        <Setter Property="Foreground" Value="{StaticResource DataGridColumnHeader.Foreground}" />
        <Setter Property="BorderBrush" Value="{StaticResource DataGridColumnHeader.BorderBrush}" />
        <Style.Triggers>
            <Trigger Property="SortDirection" Value="{x:Null}">
                <Setter Property="Background" Value="{DynamicResource DataGridHeaderBackgroundBrush}" />
                <Setter Property="BorderBrush"  Value="{DynamicResource DataGridColumnHeader.BorderBrush}" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="True" />
                    <Condition Property="SortDirection" Value="{x:Null}" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{StaticResource DataGridColumnHeader.MouseOver.BorderBrush}" />
                <Setter Property="BorderBrush" Value="{StaticResource DataGridColumnHeader.MouseOver.BorderBrush}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="False" />
                    <Condition Property="SortDirection" Value="{x:Null}" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{DynamicResource DataGridHeaderBackgroundBrush}" />
                <Setter Property="BorderBrush" Value="{DynamicResource DataGridColumnHeader.BorderBrush}" />
            </MultiTrigger>
            <Trigger Property="SortDirection" Value="Ascending">
                <Setter Property="Background" Value="{StaticResource DataGridColumnHeader.Sorted.BorderBrush}" />
            </Trigger>
            <Trigger Property="SortDirection" Value="Descending">
                <Setter Property="Background" Value="{StaticResource DataGridColumnHeader.Sorted.BorderBrush}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--DataGridColumnHeader_BasicStyle-->
    <Style x:Key="ColumnHeaderGripperStyle" TargetType="{x:Type Thumb}">
        <Setter Property="Width" Value="8"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Cursor" Value="SizeWE"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Border Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="DataGridColumnHeader_BasicStyle" TargetType="{x:Type DataGridColumnHeader}">
        <Setter Property="Background" Value="{DynamicResource DataGridColumnHeader.BorderBrush}"/>
        <Setter Property="Foreground" Value="{DynamicResource DataGridColumnHeader.Foreground}"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGridColumnHeader}">
                    <Grid>
                        <Themes:DataGridHeaderBorder BorderBrush="{DynamicResource DataGridColumnHeader.BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{DynamicResource DataGridColumnHeader.Background}" IsClickable="{TemplateBinding CanUserSort}" IsPressed="{TemplateBinding IsPressed}" IsHovered="{TemplateBinding IsMouseOver}" Padding="{TemplateBinding Padding}" SortDirection="{TemplateBinding SortDirection}" SeparatorBrush="{TemplateBinding SeparatorBrush}" SeparatorVisibility="{TemplateBinding SeparatorVisibility}">
                            <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Themes:DataGridHeaderBorder>
                        <Thumb x:Name="PART_LeftHeaderGripper" HorizontalAlignment="Left" Style="{StaticResource ColumnHeaderGripperStyle}"/>
                        <Thumb x:Name="PART_RightHeaderGripper" HorizontalAlignment="Right" Style="{StaticResource ColumnHeaderGripperStyle}"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--DataGridColumnHeader_SetDefaultStyle-->
    <Style TargetType="{x:Type DataGridColumnHeader}" BasedOn="{StaticResource DataGridColumnHeader_StackOverflowStyle_GripperBorder}"/>

    <!--DataGrid-->
    <SolidColorBrush x:Key="DataGrid.Background" Color="Transparent"/>
    <SolidColorBrush x:Key="DataGrid.BorderBrush" Color="{DynamicResource AppWide.Border}"/>
    <Style TargetType="{x:Type DataGrid}">
        <Setter Property="VerticalGridLinesBrush" Value="{DynamicResource DataGrid.BorderBrush}"/>
        <Setter Property="HorizontalGridLinesBrush" Value="{DynamicResource DataGrid.BorderBrush}"/>
        <Setter Property="GridLinesVisibility" Value="All"/>
        <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="BorderBrush" Value="#FF688CAF"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="RowDetailsVisibilityMode" Value="VisibleWhenSelected"/>
        <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
        <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGrid}">
                    <Border BorderBrush="{DynamicResource DataGrid.BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{DynamicResource DataGrid.Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="True">
                        <ScrollViewer x:Name="DG_ScrollViewer" Focusable="false">
                            <ScrollViewer.Template>
                                <ControlTemplate TargetType="{x:Type ScrollViewer}">
                                    <Grid>
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="Auto"/>
                                            <ColumnDefinition Width="*"/>
                                            <ColumnDefinition Width="Auto"/>
                                        </Grid.ColumnDefinitions>
                                        <Grid.RowDefinitions>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="*"/>
                                            <RowDefinition Height="Auto"/>
                                        </Grid.RowDefinitions>
                                        <Button Command="{x:Static DataGrid.SelectAllCommand}" Focusable="false" Style="{DynamicResource {ComponentResourceKey ResourceId=DataGridSelectAllButtonStyle, TypeInTargetAssembly={x:Type DataGrid}}}" Visibility="{Binding HeadersVisibility, ConverterParameter={x:Static DataGridHeadersVisibility.All}, Converter={x:Static DataGrid.HeadersVisibilityConverter}, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}" Width="{Binding CellsPanelHorizontalOffset, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}"/>
                                        <DataGridColumnHeadersPresenter x:Name="PART_ColumnHeadersPresenter" Grid.Column="1" Visibility="{Binding HeadersVisibility, ConverterParameter={x:Static DataGridHeadersVisibility.Column}, Converter={x:Static DataGrid.HeadersVisibilityConverter}, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}"/>
                                        <ScrollContentPresenter x:Name="PART_ScrollContentPresenter" CanContentScroll="{TemplateBinding CanContentScroll}" Grid.ColumnSpan="2" Grid.Row="1"/>
                                        <ScrollBar x:Name="PART_VerticalScrollBar" Grid.Column="2" Maximum="{TemplateBinding ScrollableHeight}" Orientation="Vertical" Grid.Row="1" Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}" Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding ViewportHeight}"/>
                                        <Grid Grid.Column="1" Grid.Row="2">
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="{Binding NonFrozenColumnsViewportHorizontalOffset, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}"/>
                                                <ColumnDefinition Width="*"/>
                                            </Grid.ColumnDefinitions>
                                            <ScrollBar x:Name="PART_HorizontalScrollBar" Grid.Column="1" Maximum="{TemplateBinding ScrollableWidth}" Orientation="Horizontal" Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}" Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding ViewportWidth}"/>
                                        </Grid>
                                    </Grid>
                                </ControlTemplate>
                            </ScrollViewer.Template>
                            <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                        </ScrollViewer>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsGrouping" Value="true"/>
                    <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false"/>
                </MultiTrigger.Conditions>
                <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
            </MultiTrigger>
        </Style.Triggers>
    </Style>

    <!--DataGridRow-->
    <SolidColorBrush x:Key="DataGridRow.Background" Color="{DynamicResource AppWide.Background}"/>
    <SolidColorBrush x:Key="DataGridRow.Foreground" Color="{DynamicResource AppWide.Foreground}"/>
    <Style TargetType="{x:Type DataGridRow}">
        <Setter Property="Background" Value="{StaticResource DataGridRow.Background}"/>
        <Setter Property="Foreground" Value="{StaticResource DataGridRow.Foreground}"/>
        <Setter Property="FontSize" Value="12.5"/>
        <Setter Property="SnapsToDevicePixels" Value="true"/>
        <Setter Property="Validation.ErrorTemplate" Value="{x:Null}"/>
        <Setter Property="ValidationErrorTemplate">
            <Setter.Value>
                <ControlTemplate>
                    <TextBlock Foreground="Red" Margin="2,0,0,0" Text="!" VerticalAlignment="Center"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGridRow}">
                    <Border x:Name="DGR_Border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                        <SelectiveScrollingGrid>
                            <SelectiveScrollingGrid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="*"/>
                            </SelectiveScrollingGrid.ColumnDefinitions>
                            <SelectiveScrollingGrid.RowDefinitions>
                                <RowDefinition Height="*"/>
                                <RowDefinition Height="Auto"/>
                            </SelectiveScrollingGrid.RowDefinitions>
                            <DataGridCellsPresenter Grid.Column="1" ItemsPanel="{TemplateBinding ItemsPanel}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                            <DataGridDetailsPresenter Grid.Column="1" Grid.Row="1" SelectiveScrollingGrid.SelectiveScrollingOrientation="{Binding AreRowDetailsFrozen, ConverterParameter={x:Static SelectiveScrollingOrientation.Vertical}, Converter={x:Static DataGrid.RowDetailsScrollingConverter}, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}" Visibility="{TemplateBinding DetailsVisibility}"/>
                            <DataGridRowHeader Grid.RowSpan="2" SelectiveScrollingGrid.SelectiveScrollingOrientation="Vertical" Visibility="{Binding HeadersVisibility, ConverterParameter={x:Static DataGridHeadersVisibility.Row}, Converter={x:Static DataGrid.HeadersVisibilityConverter}, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}"/>
                        </SelectiveScrollingGrid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsNewItem" Value="True">
                <Setter Property="Margin" Value="{Binding NewItemMargin, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--DataGridCell RealSizeOnDiskCell-->
    <SolidColorBrush x:Key="RealSizeOnDiskCell.Default.Foreground" Color="{DynamicResource AppWide.Foreground}"/>
    <SolidColorBrush x:Key="RealSizeOnDiskCell.Checked.Foreground" Color="{DynamicResource AppWide.Foreground}"/>
    <SolidColorBrush x:Key="RealSizeOnDiskCell.NotChecked.Foreground" Color="#FF537650"/>
    <SolidColorBrush x:Key="RealSizeOnDiskCell.InactiveSelectionHighligh" Color="{x:Static SystemColors.HighlightColor}"/>
    <!--<SolidColorBrush x:Key="RealSizeOnDiskCell.InactiveSelectionHighlightText" Color="{x:Static SystemColors.HighlightTextColor}"/>-->
    <Style TargetType="{x:Type DataGridCell}" x:Key="RealSizeOnDiskCellStyle">
        <Setter Property="Foreground" Value="{DynamicResource DataGridCell.Default.Foreground}"/>
        <Style.Triggers>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Background" Value="{DynamicResource DataGridCell.SelectionBackground}"/>
                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource DataGridCell.SelectionBackground}"/>
            </Trigger>
            <!--<Trigger Property="IsKeyboardFocusWithin" Value="True">
                <Setter Property="BorderBrush" Value="{DynamicResource {x:Static DataGrid.FocusBorderBrushKey}}"/>
            </Trigger>-->
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsSelected" Value="true"/>
                    <Condition Property="Selector.IsSelectionActive" Value="false"/>
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{DynamicResource DataGridCell.SelectionBackground}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource DataGridCell.SelectionBackground}"/>
                <Setter Property="Foreground" Value="{DynamicResource DataGridCell.InactiveSelectionHighlightText}"/>
            </MultiTrigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
            </Trigger>
            <DataTrigger Binding="{Binding RealSizeOnDiskIsChecked}" Value="{x:Null}">
                <Setter Property="Foreground" Value="{DynamicResource RealSizeOnDiskCell.NotChecked.Foreground}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding RealSizeOnDiskIsChecked}" Value="False">
                <Setter Property="Foreground" Value="{DynamicResource RealSizeOnDiskCell.NotChecked.Foreground}"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <!--DataGridCell-->
    <SolidColorBrush x:Key="DataGridCell.InactiveSelectionHighligh" Color="{x:Static SystemColors.HighlightColor}"/>
    <SolidColorBrush x:Key="DataGridCell.InactiveSelectionHighlightText" Color="{x:Static SystemColors.HighlightTextColor}"/>
    <SolidColorBrush x:Key="DataGridCell.SelectionBackground" Color="{DynamicResource AppWide.ElementsBackground}"/>
    <Style TargetType="{x:Type DataGridCell}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGridCell}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                        <ContentPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Background" Value="{DynamicResource DataGridCell.SelectionBackground}"/>
                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource DataGridCell.SelectionBackground}"/>
            </Trigger>
            <!--<Trigger Property="IsKeyboardFocusWithin" Value="True">
                <Setter Property="BorderBrush" Value="{DynamicResource {x:Static DataGrid.FocusBorderBrushKey}}"/>
            </Trigger>-->
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsSelected" Value="true"/>
                    <Condition Property="Selector.IsSelectionActive" Value="false"/>
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{DynamicResource DataGridCell.SelectionBackground}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource DataGridCell.SelectionBackground}"/>
                <Setter Property="Foreground" Value="{DynamicResource DataGridCell.InactiveSelectionHighlightText}"/>
            </MultiTrigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
</ResourceDictionary>